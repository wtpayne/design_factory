#!/usr/bin/env bash
# ---
#
# title:
#     "Design automation shell script."
#
# description:
#     "The design automation shell script is
#     intended to help provide a common entry
#     point for all the automated processes
#     in the design factory.
#
#     This shell script is responsible for
#     ensuring that the virtual environment
#     is appropriately created, configured
#     and activated. It is also responsible
#     for invoking the da.cli.command python
#     module which will handle command line
#     argument parsing and command invocation."
#
# type:
#     dt000_bash_script
#
# validation_level:
#     v00_minimum
#
# protection:
#     k00_general
#
# copyright:
#     "Copyright 2015-2022 William Payne"
#
# license:
#     "Licensed under the Apache License, Version
#     2.0 (the License); you may not use this file
#     except in compliance with the License.
#     You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#     Unless required by applicable law or agreed
#     to in writing, software distributed under
#     the License is distributed on an AS IS BASIS,
#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
#     either express or implied. See the License
#     for the specific language governing
#     permissions and limitations under the
#     License."
#
# ...


# -----------------------------------------------------------------------------
# Set shell options.
#
set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes


# -----------------------------------------------------------------------------
# Determine the OS. Only macOS and Linux
# (including WSL) are supported.
#
is_mac=0
is_linux=0
if ! command -v uname > /dev/null; then
    printf "'uname' command not found. Cannot determine OS.\n" 1>&2
    exit 1
fi
if [ "$(uname)" == "Darwin" ]; then
    is_mac=1
elif [ "$(uname)" == "Linux" ]; then
    is_linux=1
else
    printf "Unknown operating system: $(uname)\n" 1>&2
    exit 1
fi


# -----------------------------------------------------------------------------
# Check to ensure that the environment is
# configured as required.
#
# This section uses 'command' to check that the
# 'pyenv', 'python3', 'pip3', 'git'  and 'sshd'
# commands exist in the current execution
# environment.
#
# It checks the version of python that is active
# and switches to a defined version if necessary.
#
# It checks for the presence of a public SSH
# key in ~/.ssh/id_rsa.pub and that passwordless
# SSH to localhost is configured.
#
# If any of these prerequisites are missing, the
# bash script will be halted with an error code
# and an error message on stderr.
#
has_command_aptget=0
has_command_brew=0
has_command_curl=0
has_command_pyenv=0
has_command_python3=0
has_command_pip3=0
has_command_git=0
has_command_sshd=0
has_ssh_key=0
has_ssh_nopwd=0
if command -v "apt-get"    > "/dev/null";   then has_command_aptget=1;   fi
if command -v "brew"       > "/dev/null";   then has_command_brew=1;     fi
if command -v "curl"       > "/dev/null";   then has_command_curl=1;     fi
if command -v "pyenv"      > "/dev/null";   then has_command_pyenv=1;    fi

if [ ${is_mac} -eq 1 ]; then
    if [ ${has_command_brew} -eq 0 ]; then
        printf "The 'brew' command was not found.\n"                       1>&2
        printf "Try installing brew with:\n"                               1>&2
        printf "   /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n" 1>&2
        printf "   echo 'eval \"\$(/opt/homebrew/bin/brew shellenv)\"' >> ~/.zprofile\n" 1>&2
        printf "   eval \"\$(/opt/homebrew/bin/brew shellenv)\"\n"         1>&2
        printf "   source ~/.zprofile'\n"                                  1>&2
        exit 1
    fi
fi
if [ ${has_command_curl} -eq 0 ]; then
    printf "The 'curl' command was not found.\n"                           1>&2
    if [ ${has_command_aptget} -eq 1 ]; then
        printf "Try installing curl with:\n"                               1>&2
        printf "   sudo apt-get update\n"                                  1>&2
        printf "   sudo apt-get install curl\n"                            1>&2
    fi
    exit 1
fi
if [ ${has_command_pyenv} -eq 0 ]; then
    printf "The 'pyenv' command was not found.\n"                          1>&2
    if [ ${is_mac} -eq 1 ]; then
        printf "Try installing with:\n"                                    1>&2
        printf "   brew install pyenv\n"                                   1>&2
    elif [ ${has_command_aptget} -eq 1 ]; then
        printf "Try installing pyenv with:\n"                              1>&2
        printf "   sudo apt-get update\n"                                  1>&2
        printf "   sudo apt-get install -y make             \\ \n"         1>&2
        printf "                           build-essential  \\ \n"         1>&2
        printf "                           libssl-dev       \\ \n"         1>&2
        printf "                           zlib1g-dev       \\ \n"         1>&2
        printf "                           libbz2-dev       \\ \n"         1>&2
        printf "                           libreadline-dev  \\ \n"         1>&2
        printf "                           libsqlite3-dev   \\ \n"         1>&2
        printf "                           wget             \\ \n"         1>&2
        printf "                           curl             \\ \n"         1>&2
        printf "                           llvm             \\ \n"         1>&2
        printf "                           libncursesw5-dev \\ \n"         1>&2
        printf "                           xz-utils         \\ \n"         1>&2
        printf "                           tk-dev           \\ \n"         1>&2
        printf "                           libxml2-dev      \\ \n"         1>&2
        printf "                           libxmlsec1-dev   \\ \n"         1>&2
        printf "                           libffi-dev       \\ \n"         1>&2
        printf "                           liblzma-dev\n"                  1>&2
        printf "   curl https://pyenv.run | bash\n"                        1>&2
        printf "   echo 'export PATH=\"\${HOME}/.pyenv/bin:\${PATH}\"'"    1>&2
        printf "   >> ~/.bashrc\n"                                         1>&2
        printf "   echo 'eval \"\$(pyenv init --path)\"'             "     1>&2
        printf "   >> ~/.bashrc\n"                                         1>&2
        printf "   echo 'eval \"\$(pyenv init -)\"'                  "     1>&2
        printf "   >> ~/.bashrc\n"                                         1>&2
        printf "   echo 'eval \"\$(pyenv virtualenv-init -)\"'       "     1>&2
        printf "   >> ~/.bashrc\n"                                         1>&2
        printf "   source ~/.bashrc'\n"                                    1>&2
    fi
    exit 1
fi

# export PYENV_ROOT="${HOME}/.pyenv"
# export PATH="${PYENV_ROOT}/bin:${PATH}"
# if command -v pyenv >/dev/null 2>&1; then
#     eval "$(pyenv init -)"
# fi

if command -v "python3.13" > "/dev/null";   then has_command_python3=1;  fi
if command -v "pip3"       > "/dev/null";   then has_command_pip3=1;     fi
if command -v "git"        > "/dev/null";   then has_command_git=1;      fi

# We currently need passwordless SSH to localhost
# because the stableflow system requires it for
# automatic deploys. If we can work out a better
# way for stableflow to deploy to workers,
# then we can (and should) remove this requirement.
#
if command -v "sshd" > "/dev/null";            then has_command_sshd=1; fi
if [ -f ~/.ssh/id_rsa.pub ];                   then has_ssh_key=1;      fi
if ! ssh -o BatchMode=yes localhost "exit -1"; then has_ssh_nopwd=1;    fi


if [ ${has_command_python3} -eq 0 ]; then
    printf "The 'python3.13' command was not found.\n"                     1>&2
    printf "Try installing python3.13 with:\n"                             1>&2
    printf "   (cd $(pyenv root) && git pull)\n"                           1>&2
    printf "   pyenv install 3.13\n"                                       1>&2
    printf "   pyenv local   3.13\n"                                       1>&2
    exit 1
fi
if [ ${has_command_pip3} -eq 0 ]; then
    printf "The 'pip3' command was not found.\n"                           1>&2
    printf "Try installing python3-pip with:\n"                            1>&2
    printf "   python -m ensurepip --upgrade\n"                            1>&2
    exit 1
fi
if [ ${has_command_git} -eq 0 ]; then
    printf "The 'git' command was not found.\n"                            1>&2
    if [ ${has_command_aptget} -eq 1 ]; then
        printf "Try installing git with:\n"                                1>&2
        printf "   sudo apt-get update\n"                                  1>&2
        printf "   sudo apt-get install git\n"                             1>&2
    elif [ ${is_mac} -eq 1 ]; then
        printf "Try installing with:\n"                                    1>&2
        printf "   brew install git\n"                                     1>&2
    fi
    exit 1
fi
if [ ${has_command_sshd} -eq 0 ]; then
    printf "The 'ssh' service was not found.\n"                            1>&2
    if [ ${has_command_aptget} -eq 1 ]; then
        printf "Try installing ssh with:\n"                                1>&2
        printf "   sudo apt-get update\n"                                  1>&2
        printf "   sudo apt-get install openssh-server\n"                  1>&2
    elif [ ${is_mac} -eq 1 ]; then
        printf "Try installing with:\n"                                    1>&2
        printf "   sudo systemsetup -setremotelogin on\n"                  1>&2
    fi
    exit 1
fi
if [ ${has_ssh_key} -eq 0 ]; then
    printf "A public key was not found at ~/.ssh/id_rsa.pub.\n"            1>&2
    printf "Try creating one with:\n"                                      1>&2
    printf "   ssh-keygen -t rsa -b 4096 -N \"\" -f ~/.ssh/id_rsa\n"       1>&2
    exit 1
fi
if [ ${has_ssh_nopwd} -eq 0 ]; then
    printf "Passwordless SSH to localhost was not configured.\n"           1>&2
    printf "Try configuring it with:\n"                                    1>&2
    printf "   ssh-copy-id ${USER}@localhost\n"                            1>&2
    exit 1
fi


# -----------------------------------------------------------------------------
# Determine the path to the current workspace.
#
# This section uses the pushd and popd commands
# to change the current directory to the location
# of the script and then back to the original
# directory. It also resolves any symbolic links
# in the path. The resulting path is then stored
# in the WORKSPACE variable and exported so that
# it can be accessed by any child processes.
#
WORKSPACE=$(
    temp="${BASH_SOURCE[0]}"
    if [ -h "${temp}" ]; then
        while [ -h "${temp}" ]; do
            cd "$(dirname "${temp}")"
            temp=$(readlink "${temp}")
        done
    fi
    cd "$(dirname "${temp}")" > "/dev/null"
    pwd
)
export WORKSPACE


# -----------------------------------------------------------------------------
# Check for problems with the e000_design_automation_core
# virtual environment.
#
# We have sometimes run into problems that result
# in the venv directory being created but not
# populated. We detect this by looking to see if
# the directory exists but without the usual
# "/bin/activate" script inside it. If this is
# the case, then we simply wipe the directory
# and start again from scratch.
#
# Also, we have sometimes run into problems when
# the python version has changed and the virtual
# environment was not recreated. We detect this
# by checking if the site-packages directory is
# missing and if so, we assume the venv is broken
# and delete it.
#
id_env="e000_design_automation_core"
dirpath_venv="${WORKSPACE}/a0_env/venv/${id_env}"
filepath_activate="${dirpath_venv}/bin/activate"
ver_py="$(python3 -c 'import sys;print("{}.{}".format(*sys.version_info[:2]))')"
dirname_py3="python${ver_py}"
dirpath_py3="${dirpath_venv}/lib/${dirname_py3}";
if [[ -d "${dirpath_venv}" ]]; then
    if [[ ! -f "${filepath_activate}" ]]; then
        printf "The venv appears to be broken.\n" 1>&2
        printf "The venv will be recreated.\n"    1>&2
        rm -rf "${dirpath_venv}"
    fi
    if [[ ! -d "${dirpath_py3}" ]]; then
        printf "The venv appears to use a different python version.\n" 1>&2
        printf "The venv will be recreated.\n"    1>&2
        rm -rf "${dirpath_venv}"
    fi
fi


# -----------------------------------------------------------------------------
# Ensure the e000_design_automation_core virtual
# environment exists.
#
# This section checks if the virtual environment
# is present and creates it if not. If a new
# virtual environemnt is created, it is marked
# as stale so that required packages will be
# installed.
#
is_stale_venv=0
if [ ! -d "${dirpath_venv}" ]; then
    is_stale_venv=1
    printf "Creating virtualenv in ${dirpath_venv}\n"    1>&2
    if ! python3 -m venv "${dirpath_venv}"; then
        printf "Try installing python3-venv with:\n"     1>&2
        printf "   sudo apt-get update\n"                1>&2
        printf "   sudo apt-get install python3-venv\n"  1>&2
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# Check if the e000_design_automation_core virtual
# environment is stale.
#
# This section checks if the virtual environment
# is stale, i.e., if the list of requirements in
# the environment register has changed since the
# virtual environment was created or last updated.
#
# This section checks the modification times of
# the environment.register.yaml file and the
# site-packages and python-wheels directories
# in the virtual environment, and if the
# environment register file is newer than either
# of these directories, the virtual environment
# is considered stale.
#
get_mtime() {
    local filepath="$1"
    local mtime
    if [ ${is_mac} -eq 1 ]; then
        mtime=$(stat -f %m "${filepath}")
        date -r "${mtime}" "+%Y-%m-%d %H:%M:%S"
    else
        mtime=$(stat -c %Y "${filepath}")
        date -d "@${mtime}" "+%Y-%m-%d %H:%M:%S"
    fi
}
dirpath_envspec="${WORKSPACE}/a3_src/h10_resource/envspec"
filepath_envspec="${dirpath_envspec}/${id_env}.envspec.json"
dirpath_pkg="${dirpath_venv}/lib/${dirname_py3}/site-packages"
dirpath_wheel="${dirpath_venv}/share/python-wheels"
if [[ -d "${dirpath_pkg}" && ${filepath_envspec} -nt ${dirpath_pkg} ]]; then
    printf "Packages directory is stale.\n"
    printf " - envspec:  %s\n" "$(get_mtime "${filepath_envspec}")"
    printf " - packages: %s\n" "$(get_mtime "${dirpath_pkg}")"
    is_stale_venv=1
fi
if [[ -d "${dirpath_wheel}" && ${filepath_envspec} -nt ${dirpath_wheel} ]]; then
    printf "Packages directory is stale.\n"
    printf " - envspec: %s\n" "$(get_mtime "${filepath_envspec}")"
    printf " - wheel:   %s\n" "$(get_mtime "${dirpath_wheel}")"
    is_stale_venv=1
fi


# -----------------------------------------------------------------------------
# Ensure that the e000_design_automation_core
# virtual environment is active.
#
# This section ensures that the e000_design_automation_core
# virtual environment is active, deactivating the
# old environment if necessary and activating the
# new one.
#
if [ "${VIRTUAL_ENV:-}" != "${dirpath_venv}" ]; then
    [ -n "${VIRTUAL_ENV:-}" ] && deactivate
    . "${dirpath_venv}/bin/activate"
fi


# -----------------------------------------------------------------------------
# Add the PYTHONPATH for each of the design factory
# source code directories. Originally, we were
# installing these as editable installs using
# pip, but changes to the python packaging
# ecosystem made this less practical, so until
# such time as new PEPs for editable installs
# are finalized, we will just take the approach
# of munging the PYTHONPATH "manually".
#
export PYTHONPATH="${WORKSPACE}/a3_src/h10_resource${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h20_functionality${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h30_platform${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h40_component${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h50_subsystem${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h60_system${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h70_bespoke${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h80_research${PYTHONPATH:+":$PYTHONPATH"}"
export PYTHONPATH="${WORKSPACE}/a3_src/h90_internal${PYTHONPATH:+":$PYTHONPATH"}"


# -----------------------------------------------------------------------------
# Update the e000_design_automation_core virtual
# environment if it is stale.
#
# If the virtual environment is stale, this
# section updates it by installing all of the
# packages listed in the file
# e000_design_automation_core.envspec.json.
#
if [[ ${is_stale_venv} == 1 ]]; then
    if ! python3 -m da.env.update "${WORKSPACE}" "${id_env}"; then
        printf "Failed to update the virtual environment.\n" 1>&2
        exit 1
    fi
fi


# -----------------------------------------------------------------------------
# Run the design automation command line interface
# command module with all supplied command line
# arguments.
#
# We prepend the name of the app to the arguments
# list so that it can be extracted in command.py
# and then passed to the click library to use as
# the name of the command in the help string.
#
NAME_APP=$(basename "$0")
if [ $# -eq 0 ]; then
    python3 -m da.cli.command "${NAME_APP}"
else
    python3 -m da.cli.command "${NAME_APP}" "${@}"
fi
